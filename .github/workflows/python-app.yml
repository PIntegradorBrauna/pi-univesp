# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  container-job:
    runs-on: ubuntu-latest
    
    # executa todas as etapas dentro do contêiner especificado em vez de no host da VM.  
    # Por causa disso, a configuração da rede muda de rede baseada em host para uma rede de contêiner.
    container:
      image:  postgres:13.4-alpine

    services:
      postgres:
        image: postgres:13.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: db
        ports:
        - 5432:5432
          # necessário porque o contêiner postgres não fornece uma verificação de integridade
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
       
        pip install flake8 pytest
        pip install -r requirements.txt; 

    - run: npm ci
    - run: node client.js

      env:
        # use postgres para o host aqui porque especificamos um contêiner para o trabalho.
        # Se estivéssemos executando o trabalho na VM, seria localhost
        POSTGRES_HOST: postgres
        POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

# Executa todas as etapas na VM
# Os contêineres de serviço usarão a ligação da porta do host em vez da rede do contêiner para que você os acesse via localhost em vez do nome do serviço
  vm-job:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: db
        ports:
        # irá atribuir uma porta de host livre aleatória
        - 5432/tcp
         # necessário porque o contêiner postgres não fornece uma verificação de integridade
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v1     
    - run: npm ci
      working-directory: ./postgres
    - run: node client.js
      working-directory: ./postgres
      env:
         # use localhost para o host aqui porque estamos executando o trabalho na VM.
        # Se estivéssemos executando o trabalho em um contêiner, isso seria postgres
        POSTGRES_HOST: localhost
        POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }} # obtém a porta publicada atribuída aleatoriamente